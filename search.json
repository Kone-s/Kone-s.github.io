[{"title":"Nginx部署","path":"/posts/d0aa640c7b51.html","content":"跨域问题1234567891011121314151617location ^~ /api/ &#123; proxy_pass http://127.0.0.1:8080/api/; add_header &#x27;Access-Control-Allow-Origin&#x27; $http_origin; add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;; add_header Access-Control-Allow-Methods &#x27;GET, POST, OPTIONS&#x27;; add_header Access-Control-Allow-Headers &#x27;*&#x27;; if ($request_method = &#x27;OPTIONS&#x27;) &#123; add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;; add_header &#x27;Access-Control-Allow-Origin&#x27; $http_origin; add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;; add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#x27;; add_header &#x27;Access-Control-Max-Age&#x27; 1728000; add_header &#x27;Content-Type&#x27; &#x27;text/plain; charset=utf-8&#x27;; add_header &#x27;Content-Length&#x27; 0; return 204; &#125;&#125; 基本配置1234567891011121314151617181920212223242526272829303132333435363738394041server&#123; listen 80; server_name www.sk8xaiov.top sk8xaiov.top; index index.html index.htm default.htm default.html; root /www/wwwroot/dist; #SSL-START SSL相关配置 #error_page 404/404.html; #SSL-END #ERROR-PAGE-START 错误页相关配置 #error_page 404 /404.html; #error_page 502 /502.html; #ERROR-PAGE-END #禁止访问的文件或目录 location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md|package.json|package-lock.json|\\.env) &#123; return 404; &#125; location /api &#123; proxy_pass http://127.0.0.1:8080; proxy_set_header Host $Host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header REMOTE-HOST $remote_addr; add_header X-Cache $upstream_cache_status; proxy_set_header X-Host $host:$server_port; proxy_set_header X-Scheme $scheme; proxy_connect_timeout 30s; proxy_read_timeout 86400s; proxy_send_timeout 30s; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; &#125; # HTTP反向代理相关配置结束 &lt;&lt;&lt; access_log /www/wwwlogs/userCenter-0.log; error_log /www/wwwlogs/userCenter-0.error.log;&#125; 配置 SSL 证书1234567891011121314151617181920212223242526272829303132333435363738394041424344server &#123; #SSL 默认访问端口号为 443 listen 443 ssl; server_name www.sk8xaiov.top sk8xaiov.top; root /www/wwwroot/dist; index index.html index.htm; ssl_certificate /www/wwwroot/cert/sk8xaiov.top.pem; ssl_certificate_key /www/wwwroot/cert/sk8xaiov.top.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #请按照以下协议配置 ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; location / &#123; index index.html index.htm; &#125; location /api &#123; proxy_pass http://127.0.0.1:8080; proxy_set_header Host $Host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header REMOTE-HOST $remote_addr; add_header X-Cache $upstream_cache_status; proxy_set_header X-Host $host:$server_port; proxy_set_header X-Scheme $scheme; proxy_connect_timeout 30s; proxy_read_timeout 86400s; proxy_send_timeout 30s; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; &#125; # HTTP反向代理相关配置结束 &lt;&lt;&lt; access_log /www/wwwlogs/userCenter-0.log; error_log /www/wwwlogs/userCenter-0.error.log;&#125;server &#123; listen 80; #请填写绑定证书的域名 server_name www.sk8xaiov.top sk8xaiov.top; #把http的域名请求转成https return 301 https://$host$request_uri; &#125;","tags":["Nginx"],"categories":["技术"]},{"title":"LinuxMysql 安装问题","path":"/posts/8e7fb6ca78aa.html","content":"新建 xiaoxin 用户，并设置密码 1create user xiaoxin@&#x27;%&#x27; identified by &#x27;xiaoxin1234&#x27;; 把在所有数据库的所有表的所有权限赋值给位于所有 IP 地址的 xiaoxin 用户： 1grant all privileges on *.* to xiaoxin@&#x27;%&#x27; with grant option; 刷新权限使操作生效 1FLUSH PRIVILEGES; 修改 mysqld.cnf 配置文件 12bind-address = 0.0.0.0mysqlx-bind-address\t= 0.0.0.0 重启 mysql 服务 1service mysql restart","tags":["Linux","Mysql"],"categories":["技术"]},{"title":"LeetCeod 1.两数之和","path":"/posts/bcba6dbf8f1d.html","content":"给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 示例 1： 输入： nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释： 因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。 示例 2： 输入： nums &#x3D; [3,2,4], target &#x3D; 6输出：[1,2] 示例 3： 输入： nums &#x3D; [3,3], target &#x3D; 6输出：[0,1] 提示： 2 &lt;= nums.length &lt;= 104 -109 &lt;= nums[i] &lt;= 109 -109 &lt;= target &lt;= 109 只会存在一个有效答案 方法一：暴力枚举 最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。当使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以只需要在 x 后面的元素中寻找 target - x。 12345678910111213class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; int n = nums.length; for (int i = 0; i &lt; n; ++i) &#123; for (int j = i + 1; j &lt; n; ++j) &#123; if (nums[i] + nums[j] == target) &#123; return new int[]&#123;i, j&#125;; &#125; &#125; &#125; return new int[0]; &#125;&#125; 复杂度分析时间复杂度：O(N^2))，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。空间复杂度：O(1)。 方法二：哈希表 注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，需要找出它的索引。使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N) 降低到 O(1)。这样创建一个哈希表，对于每一个 x，首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。 123456789101112class Solution &#123;\tpublic int[] twoSum(int[] nums, int target) &#123; Map&lt;Integer, Integer&gt; hashtable = new HashMap&lt;Integer, Integer&gt;(); for (int i = 0; i &lt; nums.length; ++i) &#123; if (hashtable.containsKey(target - nums[i])) &#123; return new int[]&#123;hashtable.get(target - nums[i]), i&#125;; &#125; hashtable.put(nums[i], i); &#125; return new int[0]; &#125; &#125;","tags":["算法修炼"],"categories":["技术"]}]